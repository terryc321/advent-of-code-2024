

;; how do we start with chicken evens ??
(import (chicken pretty-print))

;; hash tables
(import (srfi-69)) 

;; make a 2 d grid from a list of strings is common task 
;; creates a fresh grid each time example is called 
(define example 
  (lambda ()
   (hash-from-strings
    '("....#....."
      ".........#"
      ".........."
      "..#......."
      ".......#.."
      ".........."
      ".#..^....."
      "........#."
      "#........."
      "......#..."))))


(define bigger
  (lambda ()
    (hash-from-strings
     '(
  "........#...........................#...........#............................................................................#...."
  "...........#..............................................##.#....................##.......#.............##..............#........"
  "...................#..#........#..#..##.................#......##..................#.....#....#.............#...........#...##...."
  "..........#......#..................................................#...................#........#..#.....#......................."
  ".........#...#......#...................................#............#...#........#.............#..#........................#....."
  "..##.#...........#......#.....#.#...#..............#.#......#.......#..............#.............#..................#.......#....."
  "...#.................................####...........#..........#..#.....#........#...........................................#...."
  "..........#......................#............................#....................#..............#......#....#.................#."
  "...#.................#.........#.........#.#.....#....#.................................................................#.#......."
  ".......#.......................#...........#..................................#.............#..................#......#.#........."
  "....................#.#.........#.........#................................#........#.#.........................#..#....#........."
  "........#.............#....#.....#................................##.....#..................#.....................#..............."
  "..............#...................#..........................................#..........#........................#................"
  "...........#...................................................................................#..........#.........##.#.........."
  "............#....................#...................#.................................#.......#............#.......#............."
  "..........................................#.....#.............#.#.......................##......#.....#..........................."
  "........................#...#..................#......................................................#.#..#......................"
  "...#.....#.....................#..........................................#................................................#.....#"
  "..##....................................#.....................#.............#.......#............................................."
  "........#..................#......#................................#.......................................................#......"
  ".........#................#...............................##.#.....................#...........................#...........#.#...."
  "............#.....#..................................#.....#........#................#............................................"
  ".....................................................##..............#.....#.....#.......#........................................"
  "..........#..#..............#..#...#.......................#..........................................#..........................."
  "...............#.............................................................#..#......#.......#..#....................#.........."
  ".#......................#....##.#....................#..#...#............................#............................#....#....#."
  "...#...................................................................................................................#.......#.."
  ".#....#..............#....................#......................................#.......................#....#..#................"
  "........#.....................#............................................#...............#......................................"
  "....#........#..........................................................................#..............................###.......#"
  "........#..#.....................#..................#..................##..........#.............................................."
  "..........................#...#................#....................................................#..#............#............."
  "......#..............#................................#.....................#.................................#............#......"
  "...................................................#....................#.................#.....#................................#"
  "..........................#...............#....#........................#.............................................#..........."
  "##..............#..............................#....#.......................#.................................................#..."
  "...........................#.............................................................#.#................#......#........#.##.."
  "........#..................#...#..............#..............................#.....#..........#..................................."
  "..........#......#.##..#.....#.......##.....#......................................................#..................#..........."
  "....#.........#................#............................................#..#...#............#.....#..#........................"
  "#.......#..............#.....................#..........#....#......#......................................#........#............."
  ".........#..........................................................................#.........#............................#......"
  "..........................#...#.......#...............#..............#.......................#...#................................"
  ".......................................................................#.........................................#...............#"
  "...................#.....#.......................................................#.............................................#.."
  "...##.....................#....#................................#........#...#....#.......##......................................"
  ".................................................................#.......#................................#.........#............."
  "#..........................#.#........................#............................................#...#.........#................"
  "................#.#........#...................#...............................#.........#............#.........#................."
  "...#...................................#.....................................................................#..#......#.........."
  ".................................................#..........................................#....#................................"
  "..............##.#...............................................#......................................................##........"
  "...........#..............................................#.....................................##.....#.........#................"
  "#.......................#..........................#......#...................#.#................................................."
  "..............##..........................#............................................................#................#........."
  ".......................#...#.........#....................................................................#............#.........."
  ".....#.................##.................................................#...........#..............#....#.................#....."
  ".........#................................................#....................#.......#.........................##.#............."
  "...........#............#...#...................#.........#....................................................#.................."
  "....................#.....................................................................#..........#.#.........................."
  "............................##..#.......................#.......#...................#.#..........#..........................#...#."
  "..................#...........#.......#.............................................................#............................."
  "...##......................#....##..................................#...............#.#..#........................................"
  "..#..............................##..................................................................#.......#...................."
  "...#.......#..........#.#.................................................##....#...............#...............#..........#.....#"
  ".....................................................##....................#..#..#...........................#...................."
  "...#......................#........#..................#.##..............#..............#....................................#....."
  "...............#..........................#..........................................................#.#..#..............#........"
  "....................##....................#..#...................................#................................................"
  "...........................#..............#.....................................#.........................##......................"
  "...............#.................................................................#.....................#.........................."
  "......#..........#...#...........#................................................#...#.................................#..#......"
  "..........#............................#.............#.....................#........#............#.........#......................"
  "...........#...........#..........#....#......................................................................#........#.........#"
  "......................#...............##.................................................................................#.....#.."
  "...#................#........#..........#...................#............^...........#.................#.#......##.#.............#"
  ".......................##..............#......#.....................................#.....#.........................#.#.#........."
  ".................#..#..........................................#...................#...#.........#................................"
  "..#.#.....#.............................................................#.#......................................................."
  "..............................#...............###...............#..........##..........................#...#..#..........##......."
  ".................................#.....#.........#......................................................#................#........"
  "...............##.#..................................................#........................#...................#.........#..##."
  ".........#.................................#......#..............................................................................."
  "..................#......................#.#.........................................................#.....#......................"
  ".#..................#.............................#..............................................................................."
  "...................#...................#.#........#......#...........................#......................#..........#.........."
  ".............#...................................................................................................#................"
  "..........................#................................................#........#..#.........................................."
  ".#........................................................#.......#......#..#....................................................."
  "..................##..............#.............#................#...............................#......#......#........#....#.#.."
  "#.............#....................................#.....................................................#........................"
  "............................#................................................................#....#.....#................#........"
  ".........#.......................................................................................................................#"
  "..#.........................................................................................#........#.#...........#.............."
  "...........#......................#.......#................................#...#.......#...............#.........................."
  ".......................#...#..#.......#..................#........#.....#.........#..............................................."
  "..#..##...................#..........#................................................#.........#...................#............."
  "........................##..........................#.......#..........................#...#.#...................................."
  "..........................................................................................#.............#...........#............#"
  "..............................#.............................................................................................#.#..#"
  ".............#..........#...........................#.........................#........#.....................#............#......#"
  "....................................#..........................................................................................#.."
  ".........#.................................#...........................................................................#.........."
  ".#..............................#......#......#.#................................#.................#......#....#..#..#...........#"
  ".#...#................#.......#............#.........#...#..........#......#.........................#....................#......."
  "..............#........................#................................................................................#........."
  ".........#........#..#.........#........#......#..#..............................................#................#..............."
  "...........#......................#.......#..................................#....#...#......#..........#........................."
  "...........#........................................................#.#...........#................#.............................."
  ".#...........................#...................#...#..................................................................#........#"
  "....................................................................#...................#.....#......#...........................#"
  "...#..#..............#......................#......#..#...............#..............#..............#..............#.............."
  "...........#........................#............#.#...........#.................................................................."
  "............#........................#.................................................#..............#.#....................#...."
  "............................#...........................#............................#........#..........................#........"
  "#................................................................#...........................#.............#.#........#.#.......#."
  "............#..........#..............#.......#...#................................#.........#.#................#........#....#..."
  "...#.....................#..........#.............#....................................................#.#........................"
  "...............#..................................................#......................#...............#........................"
  "......#............................#..................#.....#...........................................................#...#.#..."
  "#................#..........................................................................................#..........#.......#.."
  ".................................................................#..............#...................#...................#.#......."
  "...............#..............................................#.................#...............#...........................#....."
  ".............................#...#........................#....................#........#.....................................#.##"
  "...............##..#.....#..#....#.#...#...........................................#.#........#........#.......#.................."
  ".......#........................#....#..#............................................................#.......#...................."
  "........#....................#........#....#.................#........................#.............#............................."
  "#...#...........#......................................................#...............#...........#..#..#....#................#.."
  "................................#........................................................#...#..#......#....#.....#....#...#......"
  "..#..............#............................#........#....#......#.................................................#............"))))



;; dolist ?
;; iterate over a list -> iterate over the string
(define hash-from-strings
  (lambda (strings)    
    (let ((hash (make-hash-table))
          (width 0)
          (height 0))
      (letrec ((iter (lambda (xs y) ;; the list 
                       (cond
                        ((null? xs) #f)
                        (#t (let ((x 1))
                             (iter2 (car xs) 0 (string-length (car xs)) x y)
                             (iter (cdr xs) (+ y 1)))))))
               (iter2 (lambda (str i lim x y) ;; the string

                        ;; (if (and (= x 5)(= y 7))
                        ;;     (begin
                        ;;       (display "READING 5,7 as ")
                        ;;       (display (string-ref str i))
                        ;;       (newline))
                        ;;     #f)

                        (cond
                         ((= i lim) #f)
                         (#t   
                          (let ((ch (string-ref str i)))
                            
                            (cond
                             ((char=? ch #\#)
                              (hash-table-set! hash (list x y) 'rock))
                             ((char=? ch #\O)
                              (hash-table-set! hash (list x y) 'obstacle))
                             ((char=? ch #\.)
                              (hash-table-set! hash (list x y) 'empty))
                             ((char=? ch #\^)
                              (hash-table-set! hash 'start (list x y))
                              ;;
                              (hash-table-set! hash (list x y) 'empty))
                             (#t (display "unrecognised character in grid at")
                                (display x)
                                (display "")
                                (display y)))
                            
                            (if (> x width) (set! width (+ width 1)) #f)
                            (if (> y height) (set! height (+ height 1)) #f)
                            
                            ;; loop
                          (iter2 str (+ i 1) lim (+ x 1) y)))))))
        (let ((y 1))
          (iter strings y)   
          (hash-table-set! hash 'size (list width height)))
          hash))))


;; display grid , with overlay of player at px py and direction dir
(define display-grid
  (lambda (hash p dir visited)    
    (let ((px (car p))
          (py (car (cdr p)))
          (size (hash-table-ref hash 'size))
          (start (hash-table-ref hash 'start)))
      (let ((width (car size))
            (height (cadr size))
            (start-x (car start))
            (start-y (cadr start)))
        (newline)
        (letrec ((iter (lambda (x y) ;; the list 
                         (cond
                          ((> y height) (newline) #f)
                          ((> x width) (newline) (iter 1 (+ y 1)))     
                          (#t 
                           (let ((elem (hash-table-ref hash (list x y))))

                             ;; ;; see where we have visited
                             ;; (cond
                             ;;  ((member (list x y) visited)
                             ;;   (display "Y"))
                             ;;  (#t (display " ")))

                             (cond
                              ((eq? elem 'rock) (display "X"))
                              ((eq? elem 'obstacle) (display "O"))
                              ((member (list x y) visited)
                               (display "Y"))
                              ((eq? elem 'empty) (display "."))
                              (#t 
                               (display "unrecognised character in grid at")
                               (display x)
                               (display "")
                               (display y)))

                             (cond
                              ((and (= start-x x)(= start-y y))
                               (display "*"))
                              (#t (display" ")))

                             (cond
                              ((and (= px x)(= py y))
                               (cond
                                ((eq? dir 'north) (display "^"))
                                ((eq? dir 'east) (display ">"))
                                ((eq? dir 'south) (display "v"))
                                ((eq? dir 'west) (display "<"))
                                (#t (display "unrecognised player direction grid at")
                                    (display x)
                                    (display "")
                                    (display y)
                                    (display " with direction dir : ")
                                    (display dir)
                                    )))
                              (#t (display" ")))
                             
                             (iter (+ x 1) y)))))))
          (let ((x 1)(y 1))
            (iter 1 1)))))))


(define display-results
  (lambda (hash visited)    
    (let ((size (hash-table-ref hash 'size)))          
      (let ((width (car size))
            (height (cadr size)))
        (newline)
        (letrec ((my-member (lambda (p xs) ;; (x y dir)
                              (cond
                               ((null? xs) #f)
                               (#t (let* ((sq (car xs))
                                          (sx (car sq))
                                          (sy (car (cdr sq)))
                                          (sdir (car (cdr (cdr sq))))
                                          (px (car p))
                                          (py (car (cdr p))))
                                     (cond
                                      ((and (= sx px) (= sy py)) #t)
                                      (#t (my-member p (cdr xs)))))))))
                 (iter (lambda (x y) ;; the list 
                         (cond
                          ((> y height) (newline) #f)
                          ((> x width) (newline) (iter 1 (+ y 1)))     
                          (#t 
                           (cond
                            ((my-member (list x y) visited)
                             (display "X"))
                            (#t (display ".")))
                           (iter (+ x 1) y))))))
          (iter 1 1))))))



;; display grid , with overlay of player at px py and direction dir
(define display-results2
  (lambda (hash visited objx objy)    
    (let ((size (hash-table-ref hash 'size)))          
      (let ((width (car size))
            (height (cadr size)))
        (newline)
        (letrec ((my-member (lambda (p xs) ;; (x y dir)
                              (cond
                               ((null? xs) #f)
                               (#t (let* ((sq (car xs))
                                          (sx (car sq))
                                          (sy (car (cdr sq)))
                                          (sdir (car (cdr (cdr sq))))
                                          (px (car p))
                                          (py (car (cdr p))))
                                     (cond
                                      ((and (= sx px) (= sy py)) #t)
                                      (#t (my-member p (cdr xs)))))))))
                 (iter (lambda (x y) ;; the list 
                         (cond
                          ((> y height) (newline) #f)
                          ((> x width) (newline) (iter 1 (+ y 1)))     
                          (#t 
                           (cond
                            ((and (= x objx) (= y objy))
                             (display "O"))
                            ((my-member (list x y) visited)
                             (display "X"))
                            (#t (display ".")))
                           (iter (+ x 1) y))))))
          (iter 1 1))))))













;; set visited once we step into a fresh square
(define sim 
  (lambda (hash) 
    (let ((size (hash-table-ref hash 'size))
          (start (hash-table-ref hash 'start)))
      (let ((width (car size))
            (height (cadr size))
            (start-x (car start))
            (start-y (cadr start)))
    (letrec         
        (
         ;; has looped if a visited square with same direction is also later on in
         ;; the list 
         (looped (lambda (visited) 'looped))

         (looped? (lambda (visited)
                    (letrec ((iter (lambda (xs) ;; ((x y dir) ... (x y dir))
                              (cond
                               ((null? xs) #f)
                               (#t (let* ((e (car xs)))
                                     (cond
                                      ((member e (cdr xs)) #t)
                                      (#t (iter (cdr xs))))))))))
                      (iter visited))))
         
         (add-visit (lambda (p d xs) (cons (append p (list d)) xs)))
         (obstacle? (lambda (p)
                      (let ((elem (hash-table-ref hash p)))
                        (or (eq? elem 'rock)
                            (eq? elem 'obstacle)))))
         (report-visited (lambda (visited)
                    ;; 
                    (display "visited : ") (display visited) (newline)
                    (display "visited : ") (display (length visited)) (display " squares")(newline)
                    ;; results          
                           ))
         
        (off-map? (lambda (p)
                    (let ((x (car p))(y (car (cdr p))))
                     (or (> x width)
                         (< x 1)
                         (< y 1)
                         (> y height)))))        
        (off-map (lambda (p visited) 
                   (let ((x (car p))(y (car (cdr p))))
                    (display "off map at ")
                    (display x)
                    (display " ")
                    (display y)
                    (newline)
                    (report-visited visited)
                    
                    (display "final map ") (newline)
                    (display-results hash visited)
                    visited
                    )))

        (north-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list x (- y 1)))))
        (south-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list x (+ y 1)))))
        (east-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list (+ x 1) y))))
        (west-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list (- x 1) y))))
        ;; I am AT x y Facing dir havign visited these squares
         (helper-north 
          (lambda (p dir visited)   
            (let ((p2 (north-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction North -> East
                ;; (display "change of direction from north to east ") (newline)
                (helper p 'east visited))
               (#t  ;; go north
                ;; (display "going north from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))
             
         (helper-south 
          (lambda (p dir visited)                             
            (let ((p2 (south-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction South -> West
                ;; (display "change of direction from south to west ") (newline)
                (helper p 'west visited))
               (#t 
                ;; (display "going south from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))

         (helper-east
          (lambda (p dir visited)   
            (let ((p2 (east-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction East -> South
                ;; (display "change of direction from east to south ") (newline)
                (helper p 'south visited)) ;
               (#t  ;; go east
                ;; (display "going east from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))

         (helper-west
          (lambda (p dir visited)   
            (let ((p2 (west-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction West -> North
                ;; (display "change of direction from west to north ") (newline)
                (helper p 'north visited))
               (#t  ;; go west
                ;; (display "going west from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))
         
      (helper 
       (lambda (p dir visited)
         ;; show 
         ;; (display-grid hash p dir visited)
         ;; (report-visited visited)
                
         (cond
          ((eq? dir 'north) (helper-north p dir visited))
          ((eq? dir 'south) (helper-south p dir visited))
          ((eq? dir 'east) (helper-east p dir visited))
          ((eq? dir 'west) (helper-west p dir visited))
          (#t (display "bad direction ")(display dir) (newline) #f)))))
      ;; run the helper
      (let* ((dir 'north)
            (p (list start-x start-y dir))
            (visited (list p)))
        (helper p dir visited)
          
          ))))))





;; set visited once we step into a fresh square
(define sim2 
  (lambda (hash objx objy) 
    (let ((size (hash-table-ref hash 'size))
          (start (hash-table-ref hash 'start)))
      (let ((width (car size))
            (height (cadr size))
            (start-x (car start))
            (start-y (cadr start)))
    (letrec         
        (
         ;; has looped if a visited square with same direction is also later on in
         ;; the list 
         (looped (lambda (visited) 'looped))

         (looped? (lambda (visited)
                    (letrec ((iter (lambda (xs) ;; ((x y dir) ... (x y dir))
                              (cond
                               ((null? xs) #f)
                               (#t (let* ((e (car xs)))
                                     (cond
                                      ((member e (cdr xs)) #t)
                                      (#t (iter (cdr xs))))))))))
                      (iter visited))))
         
         (add-visit (lambda (p d xs) (cons (append p (list d)) xs)))
         (obstacle? (lambda (p)
                      (let ((elem (hash-table-ref hash p)))
                        (or (eq? elem 'rock)
                            (eq? elem 'obstacle)))))
         (report-visited (lambda (visited)
                    ;; 
                    (display "visited : ") (display visited) (newline)
                    (display "visited : ") (display (length visited)) (display " squares")(newline)
                    ;; results          
                           ))
         
        (off-map? (lambda (p)
                    (let ((x (car p))(y (car (cdr p))))
                     (or (> x width)
                         (< x 1)
                         (< y 1)
                         (> y height)))))        
        (off-map (lambda (p visited) 
                   (let ((x (car p))(y (car (cdr p))))
                    (display "off map at ")
                    (display x)
                    (display " ")
                    (display y)
                    (newline)

                    ;; (report-visited visited)                    
                    ;; (display "final map ") (newline)
                    ;; (display-results2 hash visited objx objy)

                    )))

        (north-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list x (- y 1)))))
        (south-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list x (+ y 1)))))
        (east-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list (+ x 1) y))))
        (west-of (lambda (p) (let ((x (car p))(y (car (cdr p)))) (list (- x 1) y))))
        ;; I am AT x y Facing dir havign visited these squares
         (helper-north 
          (lambda (p dir visited)   
            (let ((p2 (north-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction North -> East
                ;;(display "change of direction from north to east ") (newline)
                (helper p 'east visited))
               (#t  ;; go north
                ;; (display "going north from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))
             
         (helper-south 
          (lambda (p dir visited)                             
            (let ((p2 (south-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction South -> West
                ;; (display "change of direction from south to west ") (newline)
                (helper p 'west visited))
               (#t 
                ;; (display "going south from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))

         (helper-east
          (lambda (p dir visited)   
            (let ((p2 (east-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction East -> South
                ;; (display "change of direction from east to south ") (newline)
                (helper p 'south visited))
               (#t  ;; go east
                ;; (display "going east from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))

         (helper-west
          (lambda (p dir visited)   
            (let ((p2 (west-of p)))
              (cond 
               ((looped? visited) (looped visited))
               ((off-map? p2) (off-map p2 visited))
               ((obstacle? p2) ;; change direction West -> North
                ;; (display "change of direction from west to north ") (newline)
                (helper p 'north visited))
               (#t  ;; go west
                ;; (display "going west from ")
                ;; (display p) (display " to ") (display p2) (newline)
                (helper p2 dir (add-visit p2 dir visited)))))))
         
      (helper 
       (lambda (p dir visited)
         ;; show 
         ;; (display-grid hash p dir visited)
         ;; (report-visited visited)
                
         (cond
          ((eq? dir 'north) (helper-north p dir visited))
          ((eq? dir 'south) (helper-south p dir visited))
          ((eq? dir 'east) (helper-east p dir visited))
          ((eq? dir 'west) (helper-west p dir visited))
          (#t (display "bad direction ")(display dir) (newline) #f)))))
      ;; run the helper
      (let* ((dir 'north)
            (p (list start-x start-y dir))
            (visited (list p)))
        (helper p dir visited)
          
          ))))))





;; for first run of board , we do not expect a loop to occur
;; we get a list of the squares visited 
;; on each square we place an obstacle 
;; whats the start square again ? 
(define workhorse
  (lambda (problem)
      (let ((hash (problem))) ;; <<< problem set 
        (let ((size (hash-table-ref hash 'size))
              (start (hash-table-ref hash 'start)))
          (let ((width (car size))
                (height (cadr size))
                (start-x (car start))
                (start-y (cadr start))
                (loop-count '()))
            ;; remember initial direction travel is north
            (let ((squares (sim hash))
                  (visited '())
                  (internal '()))
              (display "ok done part a ") (newline)

              (letrec ((iter (lambda (xs) ;; ((x y dir) ... (x y dir))
                               (cond
                                ((null? xs) #f)
                                (#t (let* ((e (car xs))
                                           (ex (car e))
                                           (ey (car (cdr e))))
                                      (cond ;; no loop if obstacle at start position
                                       ((and (= ex start-x)(= ey start-y)) #f)
                                       ;;((member (list ex ey) internal) #f)
                                       (#t
                                        (let ((pose (problem)))
                                          ;; put an obstacle at ex ey in pose
                                          (hash-table-set! pose (list ex ey) 'obstacle)
                                          (let ((result (sim2 pose ex ey)))
                                            (cond
                                             ((eq? result 'looped)
                                              (display "AHA ! a looped at ")
                                              (display ex)(display " ")(display ey)
                                              (display-results2 hash visited ex ey)
                                              
                                              (cond
                                               ((member (list ex ey) internal) #f)
                                               (#t 
                                                (set! internal (cons (list ex ey) internal))))

                                              (newline)                                              
                                              )
                                             (#t ;; no looping
                                              #f))
                                            ;; remember this square has been done
                                            (set! visited (cons (list ex ey 'north) visited))
                                                       
                                            (iter (cdr xs))))))))))))
                (iter squares)
                (display "there were ") (display (length internal)) 
                (display "loops discovered")
                (newline)
                (display internal)
                (newline))))))))


(define test 
  (lambda ()
    ;;(display-grid (example))
    (sim (example))
    ))

(define (test2)
  (sim (bigger)))

(define (part1)
  (sim bigger))


(define (part2)
  (workhorse bigger))


;;(part2)










         







