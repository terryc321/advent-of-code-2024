(* grid4.sml - can we rewrite in a nicer way *)
(* one of the ideas we had was to elimiinate dead ends , thereby simplifying the search *)
(* we have maze , completely empty , only knows distributed throughout code the start square and end square							       *)

(* # # # *)
(* # P # *)

(* as long as P is not the end square , all squares are on the board *)
(* then we can replace P with #  *)
(* since P is a dead end *)
(* similarly with rotations and flips  *)
(* if we apply this at start square then we block off the way to the solution *)
(* so P cannot be start or end square *)

(*
if we start from end postion E we can approach E from two directions from left , from below
meaning we will be travelling right to reach E , or up to reach E ,
we can now cost those two squares as 1 each 
again cost

        . . E
          # .
            .


   2      1      E
   v1003  #      1
          <1003  2
                 3
   
*)
(* for a language want  *)
(* local definitions override library definitions *)
		  
(* this is standard ml *)
(* lets type check the hell out of it  *)

(* val rl = fn : unit -> unit ; *)
(* val rl = fn : unit -> unit = use "grid.sml"; *)

(* val rl = fn : unit -> unit ; *)
(* val rl = fn : unit = (use "grid.sml") : unit; *)
(* fun rl () = use "grid.sml"; *)
(* is the underscore ignored ?  *)
(* val rl = fn (_ : unit) : unit => use "grid2.sml";  *)

(* val mazeData : string list;		       *)
val (mazeData : string list) = ["#############################################################################################################################################",
"#.#.....#.........#...#.......#.......#.......#.................#...#...#.........#...#.........#.....#.....#.......#.......#...#.......#..E#",
"#.#.###.#.###.#####.#.#.#####.#.#.###.#.###.###.#####.#.#######.#.###.#.#.###.#.#.#.#.#.#####.#.#.###.#.#.###.#.#####.#.###.###.#.###.#.#.#.#",
"#.....#.#...#.......................#...#...#.....#...#.#.....#.......#...#...#.#...#...........#...#...#.....#.#.....#...#.....#...#.#.....#",
"#.#####.###.#.#.#####.#####.###.###.#########.#####.#####.###.#.#.#.#######.###.#####.#.###.#.#####.#######.###.#.#######.#######.###.#####.#",
"#.#...#.#...#...#...#.....#.#.#...#...........#...#.#.....#...#.#.#...#.......#.#.....#...#.#...#...#...#.....#...#.#...#.........#...#.....#",
"#.#.#.#.#.###.#.###.###.###.#.#.#.#############.#.#.#.#####.###.#.###.#.#####.#.#########.#.###.#.###.#.#.###.#####.#.#.###########.###.#.#.#",
"#...#...#.....#...#...#.....#...#.....#.....#...#.#.#.#...#...#.#.#...#.#.....#.............#...#.#.#.#...#.......#...#...#.........#...#...#",
"###.###.#####.#.#.#.#.#########.###.#.###.#.#.###.#.#.#.#####.#.#.#.###.#.###.###############.#.#.#.#.#####.#####.###.#.###.###########.#####",
"#...#...#...#...#...#.#.#...........#.......#.#.....#.#.....#.#...#.#...#.#.....#...........................#.......#.#...#...#.......#.....#",
"#.###.###.#.#.#.#####.#.#.###.#.#########.#.#.#######.#####.#.#.#.#.#.###.#####.###.#######.#####.#.###.#.#########.###.#.###.#.#####.#####.#",
"#.#...#...#.........#.#...#...#.#.......#...#.......#.#.....#...#.#.#.#.#.........................#.#...#.......#.#...#.#...#.#...#.#...#...#",
"#.#.#######.#.#.#####.#####.###.#.#.#####.#######.#.#.#.###.###.###.#.#.###.#.###.#.#.###.#.#.#####.#.#########.#.###.#.#.###.###.#.###.###.#",
"#.#.......#...#.....#.....#.#.....#.#.....#...#.#...#.#.#...#...#...#.....#.#.......#.#.....#...#.....#...................#...#...#...#...#.#",
"#.#######.#####.###.#####.#.###.###.#.###.#.#.#.#.###.#.#.###.###.###.#####.#.#######.#.#######.#.#####.#########.#.#.###.#.###.###.#.###.#.#",
"#.#...#...#...#.#.#.....#.#...#...#.........#...#...#...#...#.....#...#.....#.#...#...#.#.....#.#.....#.........#.#.#.#...#.........#.#...#.#",
"#.#.###.###.#.#.#.###.#.#.###.###.#########.###.###.#######.#######.#.#.#######.#.#.###.#.#.###.#####.#########.#.#.#.#.###############.###.#",
"#.#.........#.#...#...#...#...#.....#.......#...#.#.......#.#...#.....#...#.....#...#...#.#.....#...#...#.....#.#.....#.................#...#",
"#.###########.#####.#.###.#.#######.#.#######.###.#######.#.###.#.#######.#.#########.###.#######.#####.#.###.#.#.#######.#.#.#########.#####",
"#.#...#.....#...#...#.#...#.....#...#.#.....#.#.....#...#...#...#.#.......#.#.......#...#...#.#.........#...#...#...#.....#.#...#.#.....#...#",
"#.#.#.#####.###.#.###.#.#######.#.###.###.###.###.#.###.#.###.###.#.#.#.###.#.#####.#######.#.#.#####.###.#.#######.#.#.#.#####.#.#.#####.#.#",
"#...#.#.....#.#.#...#.#.#.......#.#.....#...#.....#.#.......#.#...#.#...#...#...#.#...#.....#...#...#.#...#.....#...#.#.#.......#...#...#.#.#",
"#####.#.###.#.#.#.#.#.#.#.#######.###.#.#.#.#######.#.#####.#.#.###.#.###.#.###.#.###.#.#########.#.###.###.#####.###.#.###.#####.###.###.#.#",
"#...............#.#.#.#...#.....#.....#.#.#...#...#.#...#.#.....#...#...#.#.#.......#.#...#.......#.....#.....#...#...#...#.#.......#...#.#.#",
"#.#.#.#.#.###.#.#.#.#####.#.#.#.###.###.#.###.#.#.#.###.#.#.#####.#######.###.#######.#.#.#.###############.#.#.#########.#.#.#####.###.#.#.#",
"#.......#.#.#.#.#.....#...#.#.#...#.#...#...#.#.#.#.....#.#.......#.....#...#...#...#.#...#.#.#.....#.......#.#.#.....#...#.#.#...#.....#.#.#",
"#.#######.#.#.#.###.#.#.#.#.#.#####.#.#####.#.#.#.#######.#####.#.#.###.###.#.###.#.#.#.###.#.#.#.#.###.###.#.#.###.#.#.###.#.#.#.#####.#.#.#",
"#...#.....#...#...#.....#...#.......#...#...#...#...#...#.......#...#...#.#...#...#...#.#...#...#.#.....#...#.#.#...#...#...#...#.....#.#.#.#",
"#.#.###.#######.#.#.#.#.###############.#.#######.#.#.###.###########.#.#.#####.#####.#.###.#.###.#.#######.#.#.#.#####.#.#.#.#######.###.#.#",
"#.#...#...#...........#...#.#...........#.....#...#.#.#...#...#.........#.#.....#.#...#.....#...#...#.....#...#.#.#.....#...............#.#.#",
"#####.#.#.#.#############.#.#.#####.#.###.#####.###.#.#.###.###.#.#####.#.#.#####.#.#############.#.#.###.#####.#.#####.#######.#######.#.#.#",
"#.....#.#.#...#...........#...#...#...#...#.....#.....#...#.....#.#.......#.....#.#...#...#.....#.#.#...#.#...#.#.#...........#.......#...#.#",
"#.#####.#.###.#.###############.#.#.#######.#.###########.#.#####.#.###########.#.###.#.#.###.#.#.#####.#.#.#.#.#.#.#.#.#####.#.#####.#####.#",
"#.......#...#.#...#.....#.......#...#.......#.#...........#.#...#.#...#.........#...#...#.....#...#...#.#.#.#.#.#...#.#.......#...#.....#.#.#",
"#.#.###.#.###.###.###.#.#.#############.#####.#.#.###########.#.#.#.###.#########.###.#############.#.#.#.#.#.#.#.###.###########.#.###.#.#.#",
"#.#.....#.....#...#...#.#.....#...#.....#...#.#.....#.........#.#.#.#...#...#...#.....#...#...#...#.#...#...#...#...#.......#.....#.#.....#.#",
"#.###########.#.###.###.###.#.#.#.#.#.#####.#.#####.#.#####.###.#.#.#.###.#.#.#.#######.#.#.#.#.#.#.###############.#######.#.#####.#####.#.#",
"#...........#.#.....#.....#.#.#.#.#.#.#...#.......#.#.#...#.#...#.#.#.....#...#.#...#...#...#...#...#.#.............#.....#...#...#...#...#.#",
"#.#########.#########.###.#.#.#.###.#.#.#.#.#######.#.###.#.#.###.#.###########.#.#.#.###############.#.###############.#.#######.###.#.###.#",
"#.#.......#.#.........#...#.#.#.....#.#.#...#...#...#...#.#.#...#.#...#.#.....#...#...#...#.......#.....#.........#.....#.#.........#.#.....#",
"#.#.#####.#.#.###.###.#.#####.#.###.#.#.#.#.#.#.#.#####.#.#.###.#.###.#.#.###.#########.#.#.#####.#.#####.#######.#.#.###.#.#####.###.###.#.#",
"#.........#...#.#.#...#.#.....#.......#.#.#.#.#.#.....#...#.....#.#.#.#.#.#.........#...#...#...#...#.....#...#...#.#...#...#...#.#...#...#.#",
"###.#######.###.#.#.###.#.#####.#######.#.###.#.#####.#######.#.#.#.#.#.#.#.#######.#.#.###.###.#####.#######.#.###.###.#.###.#.###.###.###.#",
"#...#.....#...#.#.#.#...#...#.#.........#.#...#.....#...#.....#.#.#.#.#...#.#.....#.#.#...#.....#.#...#.....#...#.....#.#.#...#.....#...#.#.#",
"#.###.###.###.#.#.#.#.#####.#.#.#######.#.#.#.#.#######.#.#####.#.#.#.#####.###.#.#.#.###.#####.#.#.#.#.###.#.###.###.#.#.#.#######.#.###.#.#",
"#...#.#.#...#...#.#.#.#.....#...#.....#.#.....#.......#.#.#...#...#.#.......#...#.#...#.#.....#.#...#...#.#.........#.#.#.#.#.#.............#",
"###.#.#.###.###.#.###.#.#####.###.###.#.#########.#.#.#.#.#.#.#####.#########.###.#####.#####.#.#####.###.#.#######.###.#.#.#.#.#.#.#.###.#.#",
"#...#.#.#...#.#.#.......#...#.#.......#...#.....#...#.#...#.#.................#...........#...#.#...#.#...#...#...#.....#.#.#.......#...#...#",
"#####.#.#.###.#.#########.#.#.#.###.#######.###.#.###.#####.#########.#################.###.###.#.#.#.###.###.#.#.#########.#.###.#.###.###.#",
"#.......#...#...#.........#.#.#.#.....#.....#...#...#.......#.........#...#.....#...#...#...#...#.#.#.....#...#.#...........#.#.#.#...#...#.#",
"#.#########.#.###.#########.#.#.#####.#.#####.###############.#######.#.#.#.###.###.#.###.###.###.#.#####.#.###.###.#########.#.#.###.###.###",
"#.#...#.....#...#...#.#.....#.#...#.#...#.............#.....#.....#...#.#.#...#...#.#...#...#.....#...#...#.#...#...#...#...#...#.#...#.#...#",
"#.#.#.#.#####.#.###.#.#.#####.###.#.#####.###########.#.###.#####.#####.#.###.###.#.#.#####.#########.#.###.#.###.###.#.#.#####.#.#.###.###.#",
"#.#.#.#.........#.....#.#.....#...#.....#.#.#.......#...#.#.#...#.......#...#.#...#...#...#.......#.......#.#.#...#...#.#.......#.......#.#.#",
"#.###.###.###.#.#.###.#.###.###.#.#####.#.#.#.#.###.#####.#.#.#.###.#####.###.#.#####.#.#.#######.###.#####.#.#.###.###.###############.#.#.#",
"#...#.#.......#.#...#.....#.#...#.#...#.....#.#...#.....#.#...#...#...#...#...#.....#...#.......#...#.......#.#.#...#.....#...........#...#.#",
"###.#.#.#.###.#.###.#####.###.#####.#.#######.###.#####.#.#######.#####.###.#.#####.###.#.#####.###.#######.#.###.#######.#.#.#######.#####.#",
"#.#.#.#...#...#.#.#...#.....#.#.....#.#...#...#.......#.#.......#.....#.....#.....#.....#...#.....#...#.....#...#.......#.....#...#.#.....#.#",
"#.#.#.###.#.#.#.#.###.###.#.#.#.#####.#.#.#.###.###.###.#.#####.#####.#.#####.#.#.###.###.#.#.###.#.#.#.###.###.#####.#.#.#####.#.#.#####.#.#",
"#...................#.....#...#.....#...#.....#.#...#...#.#...#.....#.#...#...#.#.#...#...#...#.....#...#...........#.#.#.#.....#...........#",
"#.###.#.#.###.#####.#####.#.#######.#########.#.#####.###.#.#.#####.#.###.#####.#.###.#.#.#########.#####.###########.#.#.#.#####.#.#.#####.#",
"#.#.#...#.........#...#...#.#.......#.....#.....#.....#...#.#.#...#.....#.......#.#...#.#.#.......#.......#.......#...#.#.#...#.#.#.#.....#.#",
"#.#.#.#.#.###.###.#####.#####.#######.###.#.###.#.#####.###.#.#.#.#####.#########.#.#.#.###.#####.#.#####.#.#####.#.###.#.###.#.#.#.#####.#.#",
"#.#...#.......#...#...#.......#.......#.#.#.....#.#.....#...#...#.....#.....#.....#.#.#.....#.....#.#.........#...........#.#.#.#.#.....#...#",
"#.#.###.#.###.#.###.#.#########.#######.#.#.#####.#######.###########.#####.#####.#.#########.#####.#.#######.###########.#.#.#.#.###.#.###.#",
"#.#...#.#.....#.....#.........#.#.......#.#.....#.#.....#.......#...#.....#.....#.#.......#...#...#.#.......#...#...#...#.#.#.#.#...#.#.#...#",
"#.###.#.#.#.#.###.#######.#.###.#.#####.#.#####.#.#.###.#.#.###.#.###.###.#####.#.#.#.###.#.###.#.#########.###.#.#.#.#.#.#.#.#.###.#.###.###",
"#...#.#.#...........#.....#.#...#.#.#...#.....#.#...#...#.#.#.#.#.#.....#.#...#.#...#...#.#.....#.........#.#...#.#...#.#...#...#.#.#.....#.#",
"###.#.#.#.###.###.#.#.#######.###.#.#.#.#####.#.#####.#.#.#.#.#.#.#.###.#.#.###.#.#.###.#.#############.###.#.###.#####.#######.#.#.#.#####.#",
"#.................#.#.....#...#...#.#.......#.#.#.....#.#...#.#.#.#.#.#.#.#...#.#.#...#.....#.....#...#...#.#...#...#...#...#...#.#.#.......#",
"#.#.###.#.###.#.#########.#.###.#.#.#######.#.###.###########.#.#.#.#.#.#.###.#.#.###.###.#.#.###.#.#.###.#.###.#.###.###.#.#.###.#.#.###.#.#",
"#.#...#.#.#...#.#.........#.#...#.#.........#.....#...#...#...#.#.#.#.#.#.#...#.#.#.....#.#...#.#...#...#...#.#.#.#...#.......#...#.#.....#.#",
"#.###.#.#.#.#.#.#.#####.#.#.#.###.###.#.#########.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#####.#.#.###.#######.#####.#.#.#.###.#######.#.#.#######.#",
"#...#.#...#.#.........#...#.#.#.#...#...#.....#...#.#...#...#.....#.#.....#...#.#...#...#...#.....#.....#.....#...#.....#.....#.#.#.#.......#",
"#.###.#.#.#.###.#####.#.###.#.#.###.###.#.###.#.###.###########.#.#.#.#.###.###.###.#######.#.#####.#####.#.#####.#######.###.#.#.#.#.#.#####",
"#.#...#...#.#.#...#...#...#.#.....#...#...#...#...#...............#.....#...#...#...........#.#...#...#.#.#...........#.#...#...#.#.#.......#",
"#.#.#####.#.#.###.#.#####.#.#.#####.#.###########.###.#######.###.#########.#.###############.#.#.###.#.#.#########.#.#.#.#.###.###.###.###.#",
"#...#.....#.#.....#.....#.#.#.#...#.#.............#...#...#...#.#.#.........#.........#.........#...#.#...........#.#.#.....#...#...#.....#.#",
"#.#####.#.#.###.#######.###.###.#.###############.#.###.#.#.#.#.#.#.#.###############.###########.###.#.#####.#####.#.#####.#####.###.#.###.#",
"#.#.....#.#...#...#...#...#.....#.....#.........#.#...#.#...#...#...#.#.............#...#.............#.#...#.....#.#.......#...#.#.#.#...#.#",
"#.#.#####.#.#.###.#.#.###.###########.#.#######.#####.#.#####.###.#.#.#.###########.###.#.#####.###.#####.#.#.###.#.#########.#.#.#.#.#.#.#.#",
"#...#...........#.#.#.#.#...........#...#...#.#.......#.#.#.......#.#...#.........#.....#.....#...#...#...#...#.#...#.........#.#.#.#.#.#...#",
"#####.#.#.#.###.#.#.#.#.#.#.###.###.#####.#.#.#########.#.#.#######.###.#####.###.###########.###.###.#.#######.#.###.#########.#.#.#.#.#####",
"#.............#...#.#...#...#.#.#...#.....#...#.........#.........#...#.....#...#...#...#...#...#.#.....#.....#.#.#...#.......#...#.#...#...#",
"#.#.#####.#.###.###.#########.#.#.#####.#######.###.#############.###.###.#.#####.#.#.#.#.#.###.#.#####.#.###.#.#.#.###.#.#######.#.###.###.#",
"#.#.#.....#.#...#.............#.#.#...#...#.......#.....#.......#.#.#.....#.......#.#.#...#.#...#.#...#.#.....#...#.#...#.#.....#.....#.#...#",
"#.###.###.#.#.###.#.###.#.#####.#.#.#.###.#.###########.#.#####.#.#.#############.#.#.#####.#.###.#.#.###.#.###.###.#.###.#.###.#.#.###.#.#.#",
"#...#.#.#.#...#.....#...#.#.....#...#.#...#.#...#.....#.#...#...#...#.....#.......#.....#.#...#...#.#.....#...#...#.#.#...#.#.#...#...#...#.#",
"###.#.#.#.#.#########.###.#.#########.#.#.#.###.#.###.#.###.#.#####.#.###.#.###.###.###.#.#####.###.#########.#####.#.#####.#.###.###.#.#.#.#",
"#...#...#.#.#.......#.#.......#.....#.#.#.#...#.#...#.....#.#...#.....#...#...#.....#...#.#.........#.......#.....#.#.#.....#.....#.#...#...#",
"#.###.###.#.###.###.#.#.#####.#.###.#.#.#.###.#.###.#######.###.#############.#######.###.#.#########.#####.#####.#.#.#.#####.###.#.#.#.#.###",
"#...#.#...#...#...#...#.#...#.#...#.....#.#.#.#...#.......#...#...........#...#.......#...#.#...#.........#.....#.....#.......#.....#.#.#.#.#",
"#.#.#.#.#####.###.#####.#.#.#.###########.#.#.###.#######.###.#######.###.#.#########.#.###.#.#.#.#########.#.#######.###.#.#####.#.#.#.#.#.#",
"#.#...#.....#...#...#.....#.#.......#...#...#...#.......#.....#.......#...#.......#...#.....#.#.#...#.......#.......#.....#.....#...#.....#.#",
"#.#######.#####.#.#.#######.#######.#.#.#######.#.#####.#############.#.#########.#.#.#####.#.#.###.#.#########.#.###.###.#.###.#.#####.#.#.#",
"#.#.....#.#...#.#.#.#...#...#.....#...#.#.......#.#.....#.............#.........#.#...#...#...#...#.#...#.......#...#.#...#.#...#.......#...#",
"#.###.###.#.#.#.#.#.#.#.#####.###.#####.#.#######.#####.#####.#.#.#.#.#######.###.#.###.#.###.#.#.#.###.#.###.#.###.#.#.#.#.#.#########.#.#.#",
"#...#...#.#.#.#.#.#...#...#...#.#...#...#...#.#...#...#.#.....#...#.#.#.#.....#...#...#.#.......#.#...#.#...#.#.....#.#.#...#.......#.#.....#",
"###.###.#.#.#.#.#.#######.#.###.#.###.#####.#.#.#.#.#.#.#.#####.###.#.#.#.#.###.###.#.#.#########.###.#.###.#.#.#.###.#####.#######.#.###.#.#",
"#.#...#.#...#...#.#.....#...........#.....#.....#...#.#.#.#.#...#...#...#.#.#...#...#.......#.....#...#...#.#...#...#.....#.#.#.....#.....#.#",
"#.#.#.#.#####.###.#####.###########.###.###.#.###.#.#.#.#.#.#.#####.###.#.###.###.###########.#########.#.#.#######.#####.#.#.#.#####.#####.#",
"#...#.#...#.....#...#.....#.....#.....#.#...#.#.#...#.#.............#...#.....#.#.....#.#.....#.........#.#.#.....#.......#...#.#.....#.....#",
"#.#.#.#.###.###.###.#.#####.###.#.###.#.#.###.#.#####.#####.###################.#####.#.#.#####.#######.###.#.#.###############.#.###.#.#####",
"#.#.#.#...#...#.#.....#...#...#...#...#...#.......#...#.....#.#...........#.........#.#.#.#.....#.......#...#.#...............#.#.#...#.#...#",
"#.#.#.###.###.#.#.#####.#.###.#####.###############.###.###.#.#.#.#####.###.#######.#.#.#.###.#######.###.#########.#########.#.#.#.###.###.#",
"#.#.#...#.....#...#.....#.....#...#.......#.......#.#.........#.#.........#.#.....#...#.#...#...#...#.#.#.......#...#.......#...#.#...#.#...#",
"#.#####.#.#####.###.#.#########.#########.#.#####.#.#.#####.#.#.###.#####.#.#.#.#.#####.###.#.#.#.#.#.#.#.#.#.#.#.###.###########.###.#.#.#.#",
"#.#.....#.#...#...#...#.#...#...........#.#.....#...#...#...#.#...#.....#...#.#.#.......#...#.#...#.#...#.#.#...#...#.#.........#.#.#.#...#.#",
"#.#.#######.#.###.###.#.#.#.#.#######.#.#.#####.#######.#.###.###.#####.#######.#######.#.###.#####.#.###.#.#.#.###.#.#.#######.#.#.#.#####.#",
"#...#.......#.#.....#.#...#.#.#.#...#.#.#.....#.....#.#...#...#.#...............#...#...#.#.#...#...#.#.....#.....#.#...#.....#...#.#.....#.#",
"#.#####.#####.#####.#.#.#.#.#.#.#.#.#.#.#####.#.###.#.#.###.###.#####.#########.#.#.#####.#.#.#.#.###.#.###.#####.#.#.###.#.#.#####.###.###.#",
"#.......#...#...#...#.#...#.#.#.#.#.#.#...#...#...#.#.....#...#.#...#.......#.....#...#...#.....#...#.#...#.....#.#.#.....#.#.....#...#.#...#",
"#########.#.###.#####.#.###.#.#.#.#.#.#####.#######.#.###.###.#.#.#.#.#.###.#.###.###.#.###.#######.#.###.#####.#.#.#######.#####.#.#.#.#.###",
"#...#.....#...#...#...#.#.#.....#.#...#...........#.#...#...#...#.#...#.#...#.#.....#.#.#.#.#.....#.#.....#.....#.#...#...........#.#.#.....#",
"#.#.#.#####.#.###.#.###.#.#.#####.###.#.#.###.#.#.#.###.#.###.###.#####.###.#.#.#.###.#.#.#.###.#.#.###.#.#.#.###.###.#######.#.#.#.#.#.###.#",
"#.#.#.#...#.#...#.#.#.#.#...#.....#...#.....#.#.#.#...#.#...#.#...#...#...#.#.#.#...#.#.#...#...#.#...#.#.#...#.#...#.#.......#.....#.#...#.#",
"#.###.#.###.#####.#.#.#.###.#.#############.#.#.#.###.###.#.#.#.#####.###.#.#.#.###.#.#.#.###.#.#####.#.#.#.#.#.###.#.#.#####.#######.###.#.#",
"#.....#...#.#...#...#.#.#...#...#...#...#...#...#...#...#.#...#.......#...#...#...#...#.#.#...#.#...#.#.#.#.#.#...#.#...#...#.....#...#...#.#",
"#.#######.#.#.#.#####.#.#.#.###.#.#.#.#.#.###.#####.###.###########.###.#########.#####.#.#.###.#.#.#.###.###.#.#.#.#.###.#.#####.#####.###.#",
"#.........#...#.......#.#.#...#...#.#.#...#.....#.....#.....#...#...#...#.......#.......#...#.....#.#...#.....#.#.#.#.#...#.......#...#.....#",
"#####.#######.###.###.#.#.###.#####.#.#####.###.#####.#####.#.#.#.###.###.#####.#############.#####.#.#.#######.###.#.###.#####.#.#.#.#####.#",
"#...#.#.....#...#...#.#.#.#...#...#.#.....#...#.....#.......#.#...#...#.......#.#...........#...#.#.#.#.......#.....#...#.....#.#...#.....#.#",
"#.#.#.#.###.#######.###.#.#####.#.#.#####.#.#######.#######.#.#####.###.#####.###.#####.###.###.#.#.#####.###.#.#######.#####.#.#######.#.#.#",
"#.#...#.#...#.....#.#...#.......#.#.......#.#.....#.....#...#.#...#.#.....#...#.........#...#...#.#.......#...#.....#.........#...#...#.#.#.#",
"#.#####.#.###.###.#.#.###########.###########.#.#.#.#.###.###.#.#.#.#####.#.###.#####.#.#.###.###.#.###############.#.#######.#####.#.###.#.#",
"#.....#.#.#...#.....#...........#.......#.....#...#.#...#...#.#.#.#...#...#.....#...#.#.#...#.#.....#.......#.....#.#.#...#...#...#.#.#...#.#",
"#####.#.#.###.#.###.###.#.#####.#.#####.###.###.###.#.#.###.#.###.#.#.#.#.#######.#.###.###.#.#.#####.#####.#.#.#.#.###.#.#.###.#.#.#.#.#.#.#",
"#...#.#.#.....#.#.........................................#.#...#...#...#.....#...#.....#...#.#.#...#.#...#.#.#.#.#...........#.#...#...#.#.#",
"#.#.#.#.#####.###.#.###.#.###.#.#.#.#########.#.#.#.#.###.#.###.###.###.#####.#.#########.###.#.###.#.#.#.#.#.#.#####.#.#.#####.#########.#.#",
"#.#...#.#.....#...#.....#.#...#...#.........#.#.....#...#...#...#.....#.....#.#...#.....#.....#.#...#...#.#...#.....#...#.#.....#.......#...#",
"#.#####.#.#####.###.#.#.#.#########.###.#####.#.#.###.###.###.###.#.#######.#.###.#.#.#########.#.#.###.#.#######.#.#####.#.#####.###.###.###",
"#.....#.#.....#.....#.#.#...#.....#...#.....#...#.......#.#...#...#.........#.#.#.#.#.........#...#.....#.....#...#...#.#.#...#.....#...#...#",
"#####.#.###########.#.#.#.#.#.###.###.#####.###.#.###.#.###.#####.#.#.#.#####.#.#.#########.#.#.###.###.#.#.###.#####.#.#.###.#.#######.###.#",
"#.....#...#.......#.#.#...#.#...#.#...#.#...#...#...#.#.#...#.....#.#.#.....#.#.#.........#.#...#.......#...............#.....#.#...#...#...#",
"#.#######.#.#.###.#.#.#.#.#.###.#.#.###.#.###.#.#.#.#.#.#.#####.#.#.###.###.#.#.#########.#.###.#.###.#.###.#.###.#.###.#########.#.#.#.#.###",
"#.#.......#.#...#...#...#.#...#.#.#...#.#.....#...#.#.#.........#.#.......#.#.#...........................#.#...#.#.........#.....#...#.#.#.#",
"#.#.#######.#.#.#####.#.#.#.#.#.#.###.#.#######.#.#.#.#.###########.###.###.#.#.###.#.#########.#######.#.#.###.#.#.#######.#.#####.#####.#.#",
"#.#.#.......#.....#...#.#.#.#...#...............#.#.#.............#...#.#...#.#...#.#.#.......#.........#.......#.#.....#.....#.....#...#.#.#",
"#.#.#.#######.###.#####.#.#.#######.#.#####.###.#.#.#.#.#########.#.#.#.#.###.###.#.#.#.#####.#.#####.#####.###.#.#.###.#############.#.#.#.#",
"#S#...........#.........#.........#.........#.........#.............#.....#.......#.#.......#.......#...........#.....#...............#.....#",
"#############################################################################################################################################"]
				   

(* process maze data *)
(* val arr2 = Array2.array(15,15,#".");			     *)

fun showGridHelper ( arr2 :char Array2.array,row:int,col:int,maxrow:int, maxcol:int):unit = 
    if row >= maxrow then ()
    else if col >= maxcol
    then (print "\n"; showGridHelper(arr2,row+1,0,maxrow,maxcol))
    else ( let val ch = Array2.sub(arr2,row,col)
	   in
	       print (Char.toString ch);
	       showGridHelper (arr2, row, col+1 , maxrow , maxcol)
	   end );

fun showGrid ( arr2 :char Array2.array):unit =
    let val (maxrow,maxcol) = Array2.dimensions(arr2)
	val (row,col) = (0,0)
    in
	showGridHelper(arr2,row,col,maxrow,maxcol)
    end ;

		

(* really show the grid *)
(* fun bar () = showGrid(arr2); *)


fun processChar ( mz ,row ,col ,len , arr2 )  = 
    if col >= len then ()
    else ( let val ch = String.sub( mz, col)
	   in  Array2.update(arr2,row,col,ch) ;
	       processChar( mz, row, col + 1, len, arr2)
	   end );

(* fun foo () = processChar(List.hd mazeData , 0 , 0 , String.size (List.hd mazeData) , arr2); *)


(* fun processLine (mz : string) (arr2 : 'a Array2.array) : unit =   (); *)
(* val processLine = fn (mz : string) => *)
(* 		     (fn  (row:int) => *)
(* 			 (fn arr2 => *)
(* 			     let val col = 0 *)
(* 			     in *)
(* 				 processChar( mz ,row, col ,(String.size mz), arr2) *)
(* 			     end )); *)

fun processLine (mz : string) (row:int) arr2 =
    let val col = 0
    in
	processChar( mz ,row, col ,(String.size mz), arr2)
    end ;

	
(* fun processHelper (mz : string list) (row:int) arr2  = *)
(* val rec allows for recursive defintion *)
val rec processHelper = fn (mz : string list) =>
		       (fn (row : int) =>
			   (fn arr2 =>
			       case mz of
				   [] => arr2
				 | (h :: t) =>
				   (processLine h row arr2 ;
				    processHelper t (row + 1) arr2)));

		       

fun process mz =
    let val row = 0
	val arr = Array2.array(String.size (hd mz),String.size (hd mz),#".")
    in
	processHelper mz row arr
    end ;


(* (* curried functions *) *)
(* val f = fn x => (fn y => x + y); *)

		  
		  
(* incapable of defining this  *)
(* fun leng (xs : 'a list) : int = List.length xs; *)
(* fun leng (xs : string) : int = String.size xs; *)


(* :: is cons operator *)
(* : is type of operator  *)

(* val butfirst : list -> list option ; *)
(* fun butfirst xs = case xs of  *)
(*     (h :: tl) => SOME tl *)
(*   | _ => NONE *)

(* val butfirst = fn : list => list ; *)
(* val butfirst = fn : 'a list -> 'a list ; *)
(* cannot type check entire thing , need explicitly type check each argument *)
fun butfirst (xs : 'a list) : 'a list =
    case xs of
	( h :: tl) => tl
      | _  => raise Empty ;


(* val butlast = fn : list -> list ; *)
fun butlast (xs : 'a list) : 'a list =
    case xs of
	[] => raise Empty
     | ( x :: []) => []
     | ( h :: tl) => h :: (butlast tl) ;

	   
(* fun showGrid *)
(* val arr = Array.array(10,0); *)

val maze = let val r = process mazeData
	   in
	       Array2.update(r,139,1,#".");
	       Array2.update(r,1,139,#".");
	       (* Array2.update(r,15,1,#"E");	        *)
	       r
	   end ;

datatype direction = up | left | right | down ;


(* is the position x y on the board - for my small example *)
fun onboard (x:int) (y:int) : bool =
    if x < 1 then false
    else if x > 139 then false
    else if y > 139 then false
    else if y < 1 then false
    else true ;

fun markPosition arr x y =
    Array2.update(arr,y,x,#"O") 

fun unMarkPosition arr x y =
    Array2.update(arr,y,x,#".") 


(* string length = String.size*)
(* val a = "asdf"; *)

(* how represent character in standard ml  *)
(* val ch = #"c"; *)


(* do not go above some pre determined limit say 10 corners or circa 11k
start
stop
cost = cost incurred
limit do not continue if cost excessive
dir direction

we do not copy the grid , so if we need to , just reload and have computer build a fresh
clean correct list
 *)

(* cost incorporate 1000 for turn plus 1 for move in that direction *)
(* unmark position *)
(* fun dbug (x:int) (y:int) = *)
(*     print "At "; print (Int.toString x) ; print ","; print (Int.toString y);  print "\n" *)

fun empty3 (arr:char Array2.array) (x:int) (y:int) : bool = (Array2.sub(arr,y,x) = #".")
					  
fun cango (arr:char Array2.array) (x:int) (y:int) : bool= (onboard x y) andalso (Array2.sub(arr,y,x) = #".") ;


fun wanderUp f (arr : (char Array2.array)) (x:int) (y:int) (cost:int) (limit:int) (dir: direction) =
    let val c1 = cango arr x (y-1)
	val c2 = cango arr (x-1) y
	val c3 = cango arr (x+1) y
    in	
	(
	  if c1 then f arr x (y-1) (cost+1) limit up else ();
	  if c2 then f arr (x-1) y (cost+1001) limit left else ();
	  if c3 then f arr (x+1) y (cost+1001) limit right else ()
	)
    end
	
									     

fun wanderDown f (arr : char Array2.array) (x:int) (y:int) (cost:int) (limit:int) (dir: direction) =
    let val c1 = cango arr x (y+1)
	val c2 = cango arr (x-1) y
	val c3 = cango arr (x+1) y
    in	
	(
	  if  c1 then f arr x (y+1) (cost+1) limit down else ();
	  if  c2 then f arr (x-1) y (cost+1001) limit left else ();
	  if  c3 then f arr (x+1) y (cost+1001) limit right else ()
	)
    end
	

fun wanderLeft f (arr:char Array2.array) (x:int) (y:int) (cost:int) (limit:int) (dir: direction) : unit =
    let val c1 = cango arr (x-1) y
	val c2 = cango arr  x (y-1)
	val c3 = cango arr  x (y+1)
    in
	(
	  if c1 then f arr (x-1) y (cost+1) limit left else ();
	  if c2 then f arr x (y-1) (cost+1001) limit up else ();
	  if c3 then f arr x (y+1) (cost+1001) limit down else ()
	)
    end
	
fun wanderRight f (arr:char Array2.array) (x:int) (y:int) (cost:int) (limit:int) (dir: direction) : unit =
    let val c1 = cango arr (x+1) y
	val c2 = cango arr  x (y-1)
	val c3 = cango arr  x (y+1)
    in
	(
	  if c1 then f arr (x+1) y (cost+1) limit right else ();
	  if c2 then f arr x (y-1) (cost+1001) limit up else ();
	  if c3 then f arr x (y+1) (cost+1001) limit down else ()
	)
    end

	
(* mutable variable that gets updated *)
val global_best = ref 99999999
	
(* only mutually recursive functions need to be carried together with "and" *)
fun wander (arr:char Array2.array) (x:int) (y:int) (cost:int) (limit:int) (dir: direction) : unit =
    (* if (cost > limit) then () *)
    if (cost > !global_best) then () 
    else if (x = 139 andalso y = 1)  then
	if (cost < !global_best) then 
	    ( global_best := cost ;
	      print "Solution with cost of "; print (Int.toString cost) ; print "\n";
	      (* showGrid arr ; print "\n" ; *)	 
	      ())
	else () 
    else
	(
	  markPosition arr x y ;
	  if dir = up then wanderUp wander arr x y cost limit dir else ();
	  if dir = left then wanderLeft wander arr x y cost limit dir else ();
	  if dir = right then wanderRight wander arr x y cost limit dir else ();
	  if dir = down then wanderDown wander arr x y cost limit dir else ();
	  unMarkPosition arr x y
	)
	    							      

(* its ok finds 11044 using example2.txt ok *)
fun run limit () =
    (
      simp maze ;  (* simplify maze  *)
      let val startx = 1
	  val starty = 139
	  val cost = 0
	  (* val limit = 7036 *)
	  val dir = right
      in
	  wander maze startx starty cost limit dir
      end
    );



exception Bad_coordinate

val change_count = ref 0

(*applying some basic simplification , still has some nowhere loops two entrances do not lead anywhere *)		       
fun simp arr =
    let val altered = ref false
	fun onboard2 (x:int) (y:int) : bool = (*the full every index of board 0 to 140 inclusive for 141x141 board*)
	    if x < 0 then false
	    else if x > 140 then false
	    else if y > 140 then false
	    else if y < 0 then false
	    else true 			  
	fun pattern f g x y =
	    if x > 145 then pattern f g 0 (y+1)
	    else if y > 145 then ()
	    else if x = 139 andalso y = 1 then pattern f g (x+1) y  (*avoid loop on S or End*)
	    else if x = 1 andalso y = 139 then pattern f g (x+1) y
	    else if f x y then
		( altered := true;
		  change_count := !change_count + 1;
		  print "matched change(" ;
		  print (Int.toString (!change_count)) ; print ") : " ;
		  print (Int.toString x) ; print "," ;
		  print (Int.toString y) ; print "\n";
		  g x y;		  
		  pattern f g (x + 1) y			 
		)
	    else pattern f g (x+1) y
	fun f (x:int) (y:int) (z:char) : bool =
	    (onboard2 x y) andalso Array2.sub(arr,y,x) = z
        fun g (x:int) (y:int) (z:char) : unit =
	    if onboard x y then (*do not set end or start position as unreachable*)
		if x = 139 andalso y = 1 then ()
		else if x = 1 andalso y = 139 then ()
		else if x > 139 then ()
		else if x < 1 then ()
		else if y > 139 then ()
		else if y < 1 then () 
		else Array2.update(arr,y,x,z)
	    else raise Bad_coordinate
		       
        fun top_hat x y = let val f1 = (f (x-1) (y-1) #"#") (* |``| shape *)
			      val f2 = (f x (y-1) #"#")
			      val f3 = (f (x+1) (y-1) #"#")
			      val f4 = (f (x-1) y #"#")
			      val f5 = (f x y #".")
			      val f6 = (f (x+1) y #"#")
			  in
			      f1 andalso f2 andalso f3 andalso f4 andalso f5 andalso f6
			  end
	fun top_hat_e x y = g x y #"#"
	fun bot_hat x y = let val f1 = (f (x-1) y #"#")  (* |_| shape *)
			      val f2 = (f x y #".")
			      val f3 = (f (x+1) y #"#")
			      val f4 = (f (x-1) (y + 1) #"#")
			      val f5 = (f x (y + 1) #"#")
			      val f6 = (f (x+1) (y+1) #"#")
			  in
			      f1 andalso f2 andalso f3 andalso f4 andalso f5 andalso f6
			  end
	fun bot_hat_e x y = g x y #"#"
	fun left_hat x y = let val f1 = (f (x-1) (y-1) #"#")
			      val f2 = (f x (y-1) #"#")
			      val f3 = (f (x-1) y #"#")
			      val f4 = (f x y #".")
			      val f5 = (f (x-1) (y+1) #"#")
			      val f6 = (f x (y+1) #"#")
			  in
			      f1 andalso f2 andalso f3 andalso f4 andalso f5 andalso f6
			  end
	fun left_hat_e x y = g x y #"#"
	fun right_hat x y = let val f1 = (f (x-1) (y-1) #"#")
				val f2 = (f x (y-1) #"#")
				val f3 = (f (x-1) y #".")
				val f4 = (f x y #"#")
				val f5 = (f (x-1) (y+1) #"#")
				val f6 = (f x (y+1) #"#")
			  in
			      f1 andalso f2 andalso f3 andalso f4 andalso f5 andalso f6
			  end
	fun right_hat_e x y = g (x-1) y #"#"
			      
    in
	(pattern top_hat top_hat_e 0 0 ;
	 pattern bot_hat bot_hat_e 0 0 ;
	 pattern left_hat left_hat_e 0 0 ;
	 pattern right_hat right_hat_e 0 0 ;	 
	 if !altered then (altered := false ; simp arr)
	 else ()
	)
    end ;


(* for mlton  *)
(* run 999999 () ; *)
(* run 999999999 (); *)

(*
# # #
# P #
where P is neither 139,1 or 1,139 
*)

run 262008 ();




(*

Solution with cost of 380416
Solution with cost of 376408
Solution with cost of 356328
Solution with cost of 352312
Solution with cost of 350304
Solution with cost of 350296
Solution with cost of 348296
Solution with cost of 348288
Solution with cost of 344288
Solution with cost of 342284
Solution with cost of 342268
Solution with cost of 342260
Solution with cost of 338260
Solution with cost of 336256
Solution with cost of 334252
Solution with cost of 286088
Solution with cost of 282080
Solution with cost of 282064
Solution with cost of 278052
Solution with cost of 276056
Solution with cost of 274060
Solution with cost of 274044
Solution with cost of 270032
Solution with cost of 268036
Solution with cost of 268020
Solution with cost of 266024
Solution with cost of 266020
Solution with cost of 266012
Solution with cost of 264016
Solution with cost of 264012
Solution with cost of 264008
Solution with cost of 262012
Solution with cost of 262008					       
*)	
	
	
	

	
	

	
	

		 


		 
	    

		  

		  



									    



	    

