let robots =
  [(69, 95, 70, -27); (95, 51, -76, -2); (54, 32, -80, -4); (41, 28, 27, 6);
   (63, 6, -33, 55); (80, 2, 77, -78); (69, 53, 54, -1); (78, 40, -11, 99);
   (36, 55, -18, 9); (71, 24, 83, 67); (3, 77, -38, 71); (13, 54, 5, -73);
   (89, 20, -9, 25); (39, 70, -40, -61); (38, 55, -27, 30); (40, 4, -87, 19);
   (62, 23, 35, -48); (65, 46, -61, 13); (43, 58, -93, 2); (1, 19, -61, 17);
   (81, 23, -51, 53); (11, 53, 78, 20); (70, 67, -70, -67);
   (20, 45, -88, 40); (90, 37, -37, -8); (90, 0, -11, 51); (50, 89, -20, 80);
   (84, 58, 29, 48); (1, 24, -76, -50); (39, 70, -16, -67); (4, 58, 91, -97);
   (35, 3, 54, -86); (55, 38, 56, -14); (81, 6, -4, -84); (90, 42, 17, -30);
   (54, 0, 8, 13); (30, 30, 88, -42); (3, 84, -29, -17); (75, 6, -28, -88);
   (63, 6, -94, -98); (58, 19, -93, 75); (97, 63, -3, 51); (6, 99, -30, 50);
   (48, 83, -32, 88); (59, 40, -59, -73); (54, 102, -86, 13);
   (93, 48, -91, -18); (80, 4, 72, -32); (89, 11, 98, -56);
   (64, 93, -72, -5); (0, 36, 31, 6); (46, 56, -88, -91); (58, 94, -67, 1);
   (80, 73, -18, 96); (3, 101, -2, -21); (67, 30, -45, 87); (97, 77, -3, 74);
   (24, 54, 66, -89); (96, 17, 99, -71); (84, 7, 50, -20); (89, 62, 65, -67);
   (13, 12, -48, -90); (73, 2, -45, 39); (47, 100, -59, 90);
   (36, 9, 46, -76); (78, 52, 12, -70); (1, 42, -91, 18); (20, 23, -89, 61);
   (96, 47, 24, -79); (98, 100, 31, 27); (35, 73, -80, -29);
   (40, 39, 81, 10); (8, 7, 25, 21); (23, 10, -1, 19); (95, 77, -27, 49);
   (43, 88, 20, -80); (58, 83, 21, -35); (0, 26, 38, -20); (47, 92, 61, 94);
   (23, 74, 72, -22); (52, 54, 1, -93); (8, 61, 65, -59); (8, 52, 72, -93);
   (63, 14, 17, 60); (16, 51, 82, -9); (77, 34, 56, -20); (74, 5, -58, -72);
   (35, 77, 6, 58); (37, 79, -81, -9); (25, 78, 26, 94); (40, 48, 40, 17);
   (62, 73, -45, 23); (47, 72, 42, 84); (83, 12, 37, -90); (65, 2, -65, 65);
   (29, 52, 67, -77); (98, 39, 24, 4); (76, 66, 83, 40); (6, 26, 18, -16);
   (68, 89, -52, -3); (64, 19, 30, -63); (36, 39, -68, -10);
   (46, 30, -53, -22); (77, 44, -45, -4); (82, 60, 78, 8); (87, 77, -37, 84);
   (93, 58, -57, -89); (55, 44, 55, 8); (1, 60, -16, -81);
   (98, 62, -30, -93); (64, 74, -25, 56); (64, 22, 3, 29);
   (94, 32, -57, -34); (35, 88, -94, -19); (53, 87, 89, -78);
   (18, 33, -33, -96); (62, 30, -39, 1); (3, 79, -47, -24);
   (32, 102, 41, 98); (63, 85, -76, 86); (55, 28, -64, -26);
   (29, 93, 72, -87); (96, 41, -50, -20); (38, 21, -7, 95);
   (67, 20, -97, -54); (12, 26, -26, 32); (21, 35, -68, 77);
   (38, 49, 80, 64); (94, 55, 57, -72); (60, 65, 90, 60); (73, 85, -75, -73);
   (83, 42, 83, 42); (6, 19, -89, -25); (72, 68, 63, -17); (15, 31, 86, 83);
   (39, 31, 74, 81); (42, 12, -98, -25); (64, 28, 81, -31);
   (38, 98, -35, -99); (1, 67, 85, -59); (44, 7, -65, -58);
   (75, 41, -64, 70); (67, 90, -37, -15); (56, 20, -93, -44);
   (70, 101, -58, -15); (69, 8, 90, -34); (56, 86, 42, 74);
   (74, 1, -85, -66); (55, 16, 48, 53); (98, 85, 10, -86);
   (83, 15, -84, -64); (34, 33, 98, -37); (30, 59, 88, 52); (55, 49, 55, 34);
   (97, 39, -30, -36); (31, 102, 13, -80); (42, 98, -33, -3);
   (27, 71, -70, -10); (30, 79, -82, 44); (34, 88, -8, -29);
   (0, 55, 51, -79); (26, 12, 19, -72); (3, 71, -36, 80); (50, 59, 22, -93);
   (74, 44, -79, 95); (16, 5, -8, 29); (99, 11, 30, 47); (73, 43, 89, -28);
   (26, 4, 53, 27); (11, 21, -22, -28); (14, 3, 60, 15); (26, 1, -37, 48);
   (6, 62, -86, 75); (24, 87, 90, 17); (47, 90, 81, -11); (90, 65, 98, -71);
   (91, 59, -4, -35); (9, 29, 97, 82); (89, 15, 30, 51); (50, 100, 20, -78);
   (62, 36, -96, 78); (9, 102, 99, 29); (80, 97, 27, 55); (36, 13, 74, -64);
   (88, 20, 36, 35); (25, 3, 87, -90); (11, 31, -83, -36); (67, 51, -34, 32);
   (38, 66, -34, -67); (30, 11, -39, 50); (3, 86, 95, -29); (76, 4, 63, -64);
   (28, 99, -89, 56); (30, 97, -48, 3); (98, 33, 84, -48); (82, 26, -64, 69);
   (98, 73, -3, -33); (16, 81, -67, 2); (21, 96, 92, -37);
   (44, 36, -41, -87); (48, 44, -32, 77); (79, 61, -90, 19);
   (26, 46, 66, 81); (11, 69, 25, -59); (13, 75, 12, -47); (79, 83, 63, -31);
   (40, 82, -1, -3); (89, 85, 91, 78); (27, 28, -83, -17); (35, 10, -82, 73);
   (23, 84, 33, -11); (9, 2, 99, 21); (39, 86, 5, -67); (45, 39, 87, -28);
   (80, 44, -70, 32); (14, 59, -73, 71); (51, 99, -10, 61);
   (99, 51, -16, 22); (2, 17, -63, 77); (45, 31, -73, 69); (77, 7, 63, -72);
   (31, 74, -29, 43); (100, 77, -2, 93); (23, 38, 53, 65);
   (92, 89, -94, -23); (71, 12, -20, 55); (92, 1, -44, -48);
   (61, 62, 17, 74); (44, 2, -1, -51); (27, 82, 6, 78); (89, 19, -44, -42);
   (96, 14, 31, 45); (32, 31, 53, 67); (26, 89, 79, -21); (96, 24, -51, 59);
   (2, 30, -66, 72); (70, 91, 55, 15); (87, 1, 37, 29); (76, 80, -11, 46);
   (73, 1, -72, -72); (100, 43, 65, 10); (62, 32, -12, 79);
   (33, 29, 74, -22); (76, 24, -6, -31); (3, 71, -96, -50);
   (18, 100, 46, 86); (36, 101, 73, -15); (81, 76, -50, 68);
   (35, 25, 81, -44); (74, 79, 16, 74); (7, 53, 65, -81); (89, 96, 30, -9);
   (20, 2, -82, -7); (47, 97, -13, 5); (50, 16, 96, -94); (19, 45, -89, -4);
   (45, 2, 89, -64); (60, 35, 90, 73); (47, 45, 42, 95); (55, 24, -32, 31);
   (15, 74, -96, 34); (69, 86, 36, 83); (69, 94, 76, 98); (33, 92, -4, -63);
   (52, 5, 28, -56); (14, 58, 91, -30); (9, 30, 26, -20); (9, 14, 19, -8);
   (17, 69, 12, 46); (89, 33, -68, -34); (7, 88, 59, -66); (79, 93, -5, 72);
   (43, 95, 27, -9); (43, 62, 41, 10); (60, 0, -52, -84); (7, 25, 71, -38);
   (76, 13, -51, -24); (11, 5, -89, -76); (69, 58, -92, -55);
   (36, 87, 34, 80); (57, 76, -32, -29); (78, 25, -34, 27);
   (58, 60, -39, -65); (13, 9, 33, -36); (38, 5, -23, 45); (99, 49, 93, -57);
   (18, 11, -89, 57); (74, 36, -37, -73); (70, 1, 57, -60);
   (80, 65, -11, 46); (41, 16, 28, -18); (35, 23, -80, -18);
   (82, 11, 76, 67); (74, 47, 25, -81); (12, 98, 66, 5); (69, 23, -92, -52);
   (2, 85, 58, 92); (17, 68, -48, -63); (22, 60, -12, 89); (75, 34, -11, 73);
   (16, 27, 87, -99); (95, 34, -3, -20); (16, 20, 38, -10);
   (10, 22, -22, -58); (53, 7, 75, 43); (74, 27, 63, 63); (2, 84, -27, -71);
   (99, 33, 61, 90); (89, 7, 17, 53); (65, 2, 49, 41); (83, 48, -78, -99);
   (34, 27, 52, -72); (46, 24, -33, 63); (48, 64, -60, 28);
   (46, 16, 21, -60); (88, 23, 38, -40); (77, 72, 63, 46); (33, 57, -21, 28);
   (36, 82, 11, 64); (83, 38, 17, 91); (49, 67, 94, 52); (95, 38, 23, -36);
   (87, 29, 50, 75); (88, 70, -64, 50); (56, 18, 22, -14); (85, 7, 24, 3);
   (69, 39, 56, 6); (82, 97, 77, 41); (28, 3, -88, 29); (59, 15, -86, -48);
   (43, 78, 64, 84); (78, 86, -55, -3); (62, 38, -79, -2); (81, 68, 94, 46);
   (48, 80, -85, -67); (13, 77, -90, 32); (51, 43, 49, 30);
   (94, 55, -57, 30); (41, 15, -13, -38); (40, 97, -53, 80);
   (39, 6, 34, -38); (97, 96, 77, 27); (73, 87, 76, -21); (27, 22, 76, -17);
   (80, 94, 94, -7); (78, 18, -31, -64); (34, 47, 81, -95); (87, 96, 51, 94);
   (35, 21, -14, -48); (95, 16, -85, -53); (77, 14, -90, 59);
   (49, 48, 41, 14); (75, 52, -92, 32); (16, 91, 96, -11); (50, 24, -46, 92);
   (88, 38, 37, -93); (97, 13, 85, 43); (81, 44, 50, 99); (97, 45, -97, -75);
   (35, 91, 94, 15); (3, 74, 18, -47); (64, 32, 62, 91); (74, 16, 31, -64);
   (65, 37, 44, 89); (90, 25, -98, -64); (13, 98, -36, -5);
   (83, 102, 84, -90); (42, 15, -67, 45); (8, 10, 86, 73); (72, 84, -11, -9);
   (58, 99, 36, -84); (59, 19, -5, 51); (22, 38, -76, -78); (24, 8, -68, 45);
   (60, 70, -32, 44); (41, 5, -19, -40); (28, 4, -48, 35); (53, 47, -38, 72);
   (82, 80, 23, 84); (21, 95, 19, -17); (85, 5, -71, -86); (90, 2, -44, -46);
   (92, 63, -84, -53); (82, 67, 83, -83); (9, 76, -29, -65);
   (87, 55, -90, -75); (2, 59, -19, 33); (17, 78, 38, -17); (99, 8, 51, 37);
   (58, 35, 42, 79); (9, 97, -77, 37); (63, 19, -32, -36); (76, 31, 50, 81);
   (14, 68, -89, 42); (49, 45, 97, 7); (81, 52, -38, -93); (75, 97, 3, 80);
   (48, 101, 67, -78); (89, 95, 91, -7); (6, 96, 52, -1); (67, 37, 75, 79);
   (73, 47, 37, 2); (7, 98, 32, 3); (7, 87, -43, -23); (27, 61, 62, -79);
   (30, 85, 6, 1); (42, 29, 34, -46); (47, 30, 95, 73); (25, 88, 6, 78);
   (72, 92, 36, 84); (90, 92, 64, 31); (79, 70, -72, 90); (39, 77, 81, -38);
   (50, 2, -88, -35); (90, 91, 38, -35); (75, 17, 89, 61);
   (98, 60, -16, -49); (56, 1, 56, 84); (1, 82, 55, -45); (22, 59, 86, -81);
   (100, 84, -23, -88); (90, 51, -17, -91); (82, 53, 3, -77);
   (77, 96, 36, -9); (76, 52, -38, -69); (8, 18, -72, -72); (48, 74, -20, 8);
   (22, 81, 90, -2); (55, 102, -73, 52); (83, 79, -48, 14);
   (83, 13, 97, -60); (35, 96, -94, -9); (49, 56, -45, 89);
   (55, 16, -10, 71); (58, 51, 89, 16); (1, 15, -37, 83); (27, 66, -41, -67);
   (68, 92, 56, 7); (48, 41, 35, 47); (69, 38, 56, 53); (57, 87, -58, -42);
   (69, 50, 69, 50); (11, 101, 72, 7); (61, 5, -20, -8); (41, 22, -53, -54);
   (2, 40, 45, -8); (15, 44, -21, 67); (25, 44, 80, -79); (23, 91, -25, -79);
   (82, 55, -90, -85); (37, 13, -26, -26); (10, 2, -90, 96);
   (10, 45, -95, 90); (61, 12, 55, -60); (97, 37, 98, 89); (7, 95, -2, -90);
   (23, 93, 39, 5); (70, 74, 12, 44); (28, 54, -41, -98); (34, 91, 25, -84);
   (16, 48, -21, -57); (87, 83, 17, -21); (82, 64, 23, 36);
   (60, 75, 42, -29); (30, 16, 23, 64); (4, 80, 92, 92); (74, 26, 62, 65);
   (24, 11, 25, -58); (26, 97, 57, 20); (2, 99, -62, 21); (44, 62, 61, 48);
   (8, 43, 79, -89); (32, 93, -54, 37); (31, 33, 6, -12); (80, 35, -51, -16);
   (72, 14, -18, 22); (3, 68, -15, 86); (87, 15, 11, 37); (4, 57, -9, -61);
   (23, 37, -82, -22); (9, 77, -76, -37); (32, 7, -21, 60);
   (43, 69, -50, 95); (90, 55, 4, -43); (58, 34, 59, -27); (44, 2, 45, -24);
   (32, 91, 67, 29); (52, 35, -26, -60); (80, 102, 90, -20);
   (5, 59, -43, -75); (51, 57, 45, 70); (90, 65, 51, 16); (54, 40, -74, 79);
   (47, 12, -33, -54); (71, 80, -85, -37); (24, 12, -28, -50);
   (50, 8, -79, 61); (27, 86, 65, -30); (25, 46, 16, 48); (5, 3, -76, -90)]


let wid = 101

let hgt = 103

(* verify if a robot is on the grid x y  *)
let verify (r: int * int * int * int) : bool =
  match r with
  | (x,y,vx,vy) -> if x < 0 || x >= wid then false
    else if y < 0 || y >= hgt then false
    else true

exception BadRobots 

let init_ok =
  let r = List.filter (fun x -> not x ) (List.map verify robots) in
  match r with
  | [] -> true
  | _ -> raise BadRobots 
          

(* rather than be too clever , just specialise to 101 x 103   *)

let show_tuple (r: int * int * int * int) =
  match r with
  | (x,y,vx,vy) ->
    print_string ("(x,y = " ^ (string_of_int x)  ^ " " ^ (string_of_int y) ^ " vx,vy = " ^ (string_of_int vx)  ^ " " ^ (string_of_int vy) ^ ")") 
                  
exception Teleport_bad 

(* inbuilt mod operator behaves strangely on negative numbers  *)
let teleport (r: int * int * int * int) : int * int * int * int  = 
  match r with 
  | (x,y,vx,vy) ->
    let x2 = let p = x + vx in (if p < 0 then p + wid else p) in
    let y2 = let p = y + vy in (if p < 0 then p + hgt else p) in
    let r2 = (x2 mod wid, y2 mod hgt, vx ,vy) in
    let ok = verify r2 in
    if not ok then
      (show_tuple r ; print_string " -> "; show_tuple r2 ; print_endline "" ; raise Teleport_bad)
    else r2
      
  

let rec app f xs = 
    match xs with
    | [] -> ()
    | (x :: ys) -> f x ; app f ys 
  

let next (xs: (int * int * int * int) list) =   List.map teleport xs

let onboard (x:int) (y:int) : bool =  x >= 0 && x < wid && y >= 0 && y < hgt 

(* returns a score of how many pieces at x y *)
let hot (x:int) (y:int) (g : int array array) =
   if onboard x y then g.(x).(y) else 0 
  

let grid_from_robots xs =
  let g = Array.make_matrix wid hgt 0 in
  app (fun r -> match r with
      | (x,y,_,_) -> g.(x).(y) <- g.(x).(y) + 1  ) xs ;

  let best_score : int ref = {contents = 0} in 
  let score : int ref = {contents = 0} in 
  for x = 1 to (wid - 1) do
    for y = 1 to (hgt - 1) do
      score := 0 ;
      for x2 = (x - 5) to (x + 5) do
        for y2 = (y - 5) to (y + 5) do          
          score := !score + (hot x2 y2 g)                     
        done
      done ;
      if score > best_score then (best_score := !score) 
    done
  done ;
  !best_score
    


(* try iterating until we can see a high score ?  think upto 20, 000 *)
let rec foo (n:int) (m:int) (xs : (int * int * int * int) list) =
  let r = grid_from_robots xs in
  (* print_string ("run " ^ string_of_int(n) ^ ": " ^ string_of_int(r) ^ "\n") ;  *)
  if r > m then ( print_string ("run " ^ string_of_int(n) ^ ": " ^ string_of_int(r) ^ "\n") ;
                  flush stdout ;
                  foo (n+1) r (next xs)                   
                )
  else  foo (n+1) m (next xs) 

  

let run () = foo 0 0 robots 


      



(*
in an image christmas tree most of the robots are together , so if we can measure amount empty space in a
  grid and give that a value , perhaps christmas tree will be visible on where "most" amount empty
             space exists ?
if score 8 neighbours , then a solid image will have a high score 

*)
                                     
   

(*
are there any robots greater or equal to width or height of map ?

   mod operator ocaml uses C as basis
   
   (x,y = 54 32 vx,vy = -80 -4) -> (x,y = -26 28 vx,vy = -80 -4)

   so we have to think about this now at 54 and go back 80 where on the map am i ?
   what is the mod operator ?

   we need 
   
    let p = (x + vx) mod wid
    if p < 0 then p = p + wid

    let p = (y + vy) mod hgt
    if p < 0 then p = p + hgt
   

*)


(*
let rec repeat fn xs n = if n > 0 then let ys = fn xs in repeat fn ys (n - 1) 
                               else xs ;;

(* we have a 2d grid  *)
let grid = Array.make_matrix wid hgt 0 

(* assign to grid element *)
let () = grid.(wid-1).(hgt-1) <- 1

(* get grid element *)
let a = grid.(wid-1).(hgt-1) 

*)





  

