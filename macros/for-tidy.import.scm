;;;; for-tidy.import.scm - GENERATED BY CHICKEN 5.4.0rc2 -*- Scheme -*-

(##sys#with-environment
  (lambda ()
    (scheme#eval
      '(import-syntax
         scheme
         chicken.syntax
         bindings
         chicken.format
         srfi-1
         terry))
    (import (only bindings bind bindable?))
    (import (chicken format))
    (import srfi-1)
    (import terry)
    (##sys#register-compiled-module
      'for-tidy
      'for-tidy
      (scheme#list)
      '()
      (scheme#list
        (scheme#cons
          'for
          (er-macro-transformer
            (lambda (exp rename compare?)
              (with-symbols
                (dummy letrec loop lambda cond > < >= <= + - start stop by abs)
                (cond ((bindable? (for (var start stop) . body) exp)
                       (bind (for (var start stop) . body)
                             exp
                             `(let ((,%start ,start) (,%stop ,stop))
                                (if (<= ,%start ,%stop)
                                  (for-helper
                                    (,var ,%start ,%stop ,%<= ,%+ ,1)
                                    ,@body)
                                  (for-helper
                                    (,var ,%start ,%stop ,%>= ,%- ,1)
                                    ,@body)))))
                      ((bindable? (for (var start stop by) . body) exp)
                       (bind (for (var start stop by) . body)
                             exp
                             `(let ((,%start ,start) (,%stop ,stop) (,%by ,by))
                                (if (<= ,%start ,%stop)
                                  (for-helper
                                    (,var ,%start ,%stop ,%<= ,%+ ,%by)
                                    ,@body)
                                  (for-helper
                                    (,var ,%start ,%stop ,%>= ,%- ,%by)
                                    ,@body)))))))))))
      (scheme#list
        (scheme#cons
          'for2
          (er-macro-transformer
            (lambda (exp rename compare?)
              (simple-helper exp rename compare?)))))
      (scheme#list))))

;; END OF FILE
